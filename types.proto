// Common data type implementations
// Intended to be re-used

syntax = "proto3";

/*
* Edge is somewhat abstract.
* Must infer what kind of data one might expect.
*/

// Each edge contains another object and arbitrary data
message Edge {
    string value = 1;
    Node node = 2;
}

// Each proper object within the Graph - First one is Root
message Node {
    string value = 1;
    repeated Edge children = 2;
}

// Top level GraphContainer
// Contains all Graph elemebt roots within
message GraphContainer {
    repeated Node nodes = 1;
}

message Vector2_i32 {
    sint32 x = 1;
    sint32 y = 2;
}

// This is signed to represent negative Vectors in the case where it's used
message Vector_i32 {
    sint32 x = 1;
    sint32 y = 2;
    sint32 z = 3;
    sint32 w = 4;
}

message Vector3_f32 {
    float x = 1;
    float y = 2;
    float z = 3;
}

/* The Double equivalent - storage safe */ 
message Vector3_f64 {
    double x = 1;
    double y = 2;
    double z = 3;
}

message PhysicalProperties {
    int32 friction = 1;
    double density = 2; // kg per cubic cm kg/(cm^3)
    double mass = 3; // kg
    double volume = 4; //cm^3
    double area = 5; // cm^2
    Vector3_f32 com = 6; // non-negative? Vec3
    /* add color information */
}

/* Describes the Occurrence translation from the component origin */
// https://www.brainvoyager.com/bv/doc/UsersGuide/CoordsAndTransforms/SpatialTransformationMatrices.html#:~:text=Homogeneous%20coordinates%20(4%2Delement%20vectors,points%20and%203%2Drow%20matrices.
message Translation {
    Vector3_f32 origin = 1;
    float x = 2;
    float y = 3;
    float z = 4;
}

message SpatialTransformMatrix {
    repeated float values = 1;
}

message Transform {
    SpatialTransformMatrix spatial_matrix = 1;
    Translation translation = 2;
    Rotation rotation = 3;
}

// This is only positive rotation
message Rotation {
    int32 euler_x = 1;
    int32 euler_y = 2;
    int32 euler_z = 3;
}

// RGBA in expanded form 0-255
message Color {
    // red 
    int32 R = 1;
    // green
    int32 G = 2;
    // blue
    int32 B = 3;
    // alpha
    int32 A = 4;
}

// Axis Enum
enum Axis {
    X = 0;
    Y = 1;
    Z = 2;
}

/*
* Info
* Defines basic fields for almost all objects
* The location where you can access the GUID for a reference
*/
message Info {
    // Generic readable name
    string name = 1;
    // GUID unique value - must always be defined
    // since guid's have exactly 128bits could be represented with bytes[]
    // however endian becomes an issue
    string GUID = 2;
    // Version of design iteration
    uint32 version = 3;
}