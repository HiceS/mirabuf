syntax = "proto3";

import "types.proto";

package mirabuf.joint;

// You can have an Open-Chain robot meaning a single path
// You can have a closed chain mechanism or Four-bar (closed loop)
// Or multiple paths with closed loop like a stewart platform

// Are joint constraints independent ?

// dof
// dof = 6(N-1-J)+SUM<j->i=1>(fi)
// m is always 6 in this case
// N is bodies represented as moving components
// J is joints represented as connections between bodies


message Joints {
    Info info = 1;
    map<string, Joint> joints = 2;
    repeated RigidGroup rigid_groups = 3;
}

// Describes the joint
enum JointMotion {
    RIGID = 0;
    REVOLUTE = 1;
    SLIDER = 2;
    CYLINDRICAL= 3;
    PINSLOT = 4;
    PLANAR = 5;
    BALL = 6;
    CUSTOM = 7;
}

// Describes a Joint in the Fusion Context that can be interpreted by anything 
message Joint {

    /// Joint name, ID, version, etc
    Info info = 1;
    
    // Object that contains the joint - the ID
    string parent = 2;

    // Object that is affected by the joint - the ID
    string child = 3;

    // Transform relative to the parent
    Vector3 origin = 4;

    // type of motion described by the joint
    JointMotion joint_motion_type = 5;

    // At what effort does it come apart at. - leave blank if it doesn't
    float break_magnitude = 6;  

    // The actual motion of the joint
    oneof JointMotion {
        RotationalJoint rotational = 7; /// ONEOF rotational joint
        PrismaticJoint prismatic = 8;   /// ONEOF prismatic joint
        CustomJoint custom = 9;         /// ONEOF custom joint
        // todo reserve some spaces here or get rid of the oneof entirely
    }

    /// Additional information someone can query or store relative to your joint.
    UserData user_data = 10;
}

/**
 * Dynamics specify the mechanical effects on the motion.
 */
message Dynamics {
    float damping = 1;  /// Damping effect on a given joint motion
    float friction = 2; /// Friction effect on a given joint motion
}

/**
 * Limits specify the mechanical range of a given joint.
 *
 * TODO: Add units
 */
message Limits {
    float lower = 1;    /// Lower Limit corresponds to default displacement
    float upper = 2;    /// Upper Limit is the joint extent
    float velocity = 3; /// Velocity Max in m/s^2 (angular for rotational)
}

/**
 * Safety switch configuration for a given joint.
 * Can usefully indicate a bounds issue.
 * Inspired by the URDF implementation.
 *
 * This should really just be created by the controller.
 * http://wiki.ros.org/pr2_controller_manager/safety_limits
 */
message Safety {
    float lower_limit = 1; /// Lower software limit
    float upper_limit = 2; /// Upper Software limit
    float k_position = 3;  /// Relation between position and velocity limit
    float k_velocity = 4;  /// Relation between effort and velocity limit
}

/**
 * For a single DOF there is data to derive at most 1 degree of freedom.
 */
message DOF {
    string name = 1;   /// In case you want to name this degree of freedom
    Vector3 axis = 2;  /// Axis the degree of freedom is pivoting by
    Axis pivotDirection = 3;  /// Direction the axis vector is offset from
    Dynamics dynamics = 4;  /// Dynamic properties of this joint pivot
    Limits limits = 5;  /// Limits of this freedom
    float value = 6; /// Current value of the DOF
}

/**
 * CustomJoint is a joint with N degrees of freedom specified.
 * There should be input validation to handle max freedom case.
 */ 
message CustomJoint {
    repeated DOF dofs = 1; /// A list of degrees of freedom that the joint can contain
}

/**
 * RotationalJoint describes a joint with rotational translation.
 * This is the exact same as prismatic for now.
 */
message RotationalJoint {
    DOF rotational_freedom = 1;
}

/**
 * Prismatic Joint describes a motion that translates the position in a single axis
 */
message PrismaticJoint {
    DOF prismatic_freedom = 1;
}

message RigidGroup {
    string name = 1;

    // this could be the full path of the occurrence in order to make it easier to assembly them possibly - just parse on the unity side
    repeated string occurrences = 2;
}
