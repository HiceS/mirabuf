syntax = "proto3";

package mirabuf;

option optimize_for = SPEED;

import "types.proto";
import "joint.proto";
import "material.proto";

message Assemblies {
    repeated Assembly assemblies = 1;
}

/**
 * Assembly
 * Base Design to be interacted with
 */
message Assembly {
    /// Basic information (name, Author, etc)
    Info info = 1;
    /// All of the data in the assembly
    AssemblyData data = 2;
    /// Can it be effected by the simulation dynamically
    bool dynamic = 3;
    /// Overall physical data of the assembly
    PhysicalProperties physical_data = 4;
    /// The Design hierarchy represented by Part Refs - The first object is a root container for all top level items
    GraphContainer design_hierarchy = 5;
    /// The Joint hierarchy for compound shapes
    GraphContainer joint_hierarchy = 6;
    /// The Transform in space currently
    Transform transform = 7;
}

/**
 * Data used to construct the assembly
 */
message AssemblyData {
    Parts parts = 1;    /// Meshes and Design Objects
    joint.Joints joints = 2;  /// Joint Definition Set
    material.Materials materials = 3; /// Appearance and Physical Material Set
}

// Part file can be exported seperately in the future
message Parts {
    Info info = 1;
    /// Map of the Exported Part Definitions
    map<string, PartDefinition> part_definitions = 2;
    /// Map of the Exported Parts that make up the object
    map<string, PartInstance> part_instances = 3;
}

/**
* Part Definition
* Unique Definition of a part that can be replicated.
* Useful for keeping the object counter down in the scene.
*/
message PartDefinition {
    Info info = 1;
    /// Physical data associated with Part
    PhysicalProperties physical_data = 2;
    /// Base Transform applied - Most Likely Identity Matrix
    Transform base_transform = 3;
    /// Bodies to populate part
    repeated Body bodies = 4;
}

/*
* Part
* Represents a object that does not have to be unique
* Can be an override for an existing definition
*/
message PartInstance {
    Info info = 1;
    /// Reference to the Part Definition defined in Assembly Data
    string part_definition_reference = 2;
    /// Overriding the object transform (moves the part from the def)
    Transform transform = 3;
    /// Joints that interact with this element
    repeated string joints = 4;
}

/* 
* Body object
* Can contain a TriangleMesh or Collection of Faces.
* Must be unique in the context of the Assembly.
*/
message Body {
    Info info = 1;
    /// Reference to Part Definition
    string part = 2;
    /// Triangle Mesh for rendering
    TriangleMesh triangle_mesh = 3;
    /// Material Reference 
    string material = 4;
}

/**
 * Traingle Mesh for Storing Display Mesh data
 *
 */
message TriangleMesh {
    Info info = 1;

    /// Is this object a Plane ? (Does it have volume)
    bool has_volume = 2;

    /// Rendered Appearance properties referenced from Assembly Data
    string material_reference = 3;

    /// What kind of Mesh Data exists in this Triangle Mesh
    oneof mesh_type {
        Mesh mesh = 4; /// Stored as true types, inidicies, verts, uv
        BinaryMesh bmesh = 5; /// Stored as binary data in bytes
    }
}

/**
 * Mesh Data stored as generic Data Structure
 *
 */
message Mesh {
    /// Tri Mesh Verts vec3
    repeated float verts = 1;
    /// Tri Mesh Normals vec3
    repeated float normals = 2;
    /// Tri Mesh uv Mapping vec2
    repeated float uv = 3;
    /// Tri Mesh indicies (Vert Map)
    repeated int32 indices = 4;
}

/// Mesh used for more effective file transfers
message BinaryMesh {
    bytes data = 1; /// BEWARE of ENDIANESS 
}